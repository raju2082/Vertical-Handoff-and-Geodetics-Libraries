#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "declarations.h"
//#define RADIANS         57.2957795 
//#define DEG_TO_RADIANS(degrees) (degrees/RADIANS)
#define DEG_TO_RADIANS(degrees) (degrees * M_PI/180)

double METERS_DEGLAT(double latitude){/*change in one degree latitude*/
        return(111132.09 - (566.05 * cos(2.0*DEG_TO_RADIANS(latitude)))\
                + (1.20 * cos(4.0*DEG_TO_RADIANS(latitude)))\
                - (0.002 * cos(6.0*DEG_TO_RADIANS(latitude))));
}
double METERS_DEGLON(double latitude){/*change in one degree longitude*/
        return((111415.13 * cos(DEG_TO_RADIANS(latitude)))\
                - (94.55 * cos(3.0*DEG_TO_RADIANS(latitude)))\
                + (0.12 * cos(5.0*DEG_TO_RADIANS(latitude))));
}

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  latLongToXY
 *  Description:  Converts the lat long of a point to XY
 * =====================================================================================
 */
void latLongToXY(Offset_t A,Offset_t R, Offset_t *rpt){	float Alat,Along,Rlat,Rlong,Xr,Yr;
	double r,ct,st;
	double angle = DEG_TO_RADIANS(0);
	Alat  = A.x; 	Rlat  = R.x;
	Along = A.y;	Rlong = R.y;

	Xr = (Rlong - Along) * METERS_DEGLON(Alat);
        Yr = (Rlat  - Alat) * METERS_DEGLAT(Alat);
        r  = sqrt(Xr*Xr + Yr*Yr);
        if(r){
		ct = Xr/r;
                st = Yr/r;
                Xr = r * ( (ct * cos(angle)) + (st * sin(angle)) );
                Yr = r * ( (st * cos(angle)) - (ct * sin(angle)) );
	}
        rpt->x = Xr ;
        rpt->y = Yr ;
}/* -----  end of function latLongToXY  ----- */

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  lineEqnbtwTwoPts
 *  Description:  finds the Eqn of each line of a four sided polygon and stores the results
 * =====================================================================================
 */
float lineEqnbtwnTwoPts(Region_t *reg1, float xx1, float yy1, float x2, float y2, float x, float y){
        float R;
	float m[4],c[4];
        static int i=0;
        if(xx1==x2&&yy1==y2) {
                printf("they are same points, infinite number of lines are possible\n");
                exit(1);
        }
       else {
                m[i] = (y2-yy1)/(x2-xx1);
                c[i] = y2-(m[i]*x2);
                printf("the equation of line is y=%fx+%f \n",m[i],c[i]);
                R = (m[i]*x) - y + c[i];
		reg1->eachLine_res[i] = R;
		reg1->m[i] = m[i];
		reg1->c[i] = c[i];
		printf("reg1->eachLine_res[%d]=%lf\treg1->m[%d]=%lf\treg1->c[%d]=%lf\n",i,reg1->eachLine_res[i],i,reg1->m[i],i,reg1->c[i]);
                printf("R = %f\n",R);
                i = i+1; 
                if(i == 4) 
                        i=0; 
                return R;
        }
}/* -----  end of function lineEqnbtwTwoPts  ----- */

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  initRegion
 *  Description:  Initializes the four sided polygon region
 * =====================================================================================
 */
void initRegion(Region_t *reg, Offset_t *A, Offset_t *B,Offset_t *C,Offset_t *D){

        float R1,R2,R3,R4;
        float o1,o2,xx1,yy1,x2,y2,x3,y3;

        o1 = A->x;      xx1= B->x;
        o2 = A->y;      yy1= B->y;

        x2 = C->x;      x3 = D->x;
        y2 = C->y;      y3 = D->y;

        R1 = lineEqnbtwnTwoPts(reg,o1,o2,xx1,yy1,x2,y2);
        R2 = lineEqnbtwnTwoPts(reg,xx1,yy1,x2,y2,x3,y3);
        R3 = lineEqnbtwnTwoPts(reg,x2,y2,x3,y3,o1,o2);
        R4 = lineEqnbtwnTwoPts(reg,x3,y3,o1,o2,xx1,yy1);
}/* -----  end of function initRegion  ----- */

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  checkValidRegion
 *  Description:  Validates the randompoint whether it is inside the region or not.
 * =====================================================================================
 */
int checkValidRegion(Region_t *reg,Offset_t *randompt){	
	float Xr,Yr,V;
	int j,flag;
	Xr = randompt->x;	
	Yr = randompt->y;
	
	for(j = 0; j< 4; j++){
		V = (reg->m[j] * Xr) - Yr + reg->c[j];
		printf("V = %lf\n",V);
		printf("reg->eachLine_res[%d]=%lf\treg->m[%d]=%lf\treg->c[%d]=%lf\n",j,reg->eachLine_res[j],j,reg->m[j],j,reg->c[j]);

		if(reg->eachLine_res[j] >= 0){
			if(V >= 0){
				printf("%d line eqn satisfied\n",j+1);
		//		return true;
				flag = true;
			}
			else{
				printf("%d line eqn not satisfied\n",j+1);
	//			return false;
				flag = false;
				break;
			}
		}
		else if(reg->eachLine_res[j] <= 0){
			if(V <= 0){
				printf("%d line eqn satisfied\n",j+1);
		//		return true;
				flag = true;
			}
			else{
				printf("%d line eqn not satisfied\n",j+1);
		//		return false;
				flag = false;
				break;
			}
		}
	}
	return flag;
}/* -----  end of function checkValidRegion  ----- */
